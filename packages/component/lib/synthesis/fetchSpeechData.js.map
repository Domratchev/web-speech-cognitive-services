{"version":3,"sources":["../../src/synthesis/fetchSpeechData.js"],"names":["DEFAULT_LANGUAGE","DEFAULT_VOICE","SYNTHESIS_URL","DEFAULT_REGION","fetchSpeechData","accessToken","lang","outputFormat","pitch","rate","text","voice","volume","gender","region","ssml","fetch","headers","Authorization","method","body","res","status","Error","arrayBuffer"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA,IAAMA,gBAAgB,GAAG,OAAzB;AACA,IAAMC,aAAa,GAAG,gEAAtB;AACA,IAAMC,aAAa,GAAG,+CAAtB;AACA,IAAMC,cAAc,GAAG,QAAvB;;SAE8BC,e;;;;;;;4BAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,WADa,QACbA,WADa,mBAEbC,IAFa,EAEbA,IAFa,0BAENN,gBAFM,cAGbO,YAHa,QAGbA,YAHa,EAIbC,KAJa,QAIbA,KAJa,EAKbC,IALa,QAKbA,IALa,EAMbC,IANa,QAMbA,IANa,oBAObC,KAPa,EAObA,KAPa,2BAOLV,aAPK,eAQbW,MARa,QAQbA,MARa,qBASbC,MATa,EASbA,MATa,4BASJ,IATI,mCAUbC,MAVa,EAUbA,MAVa,4BAUJX,cAVI;AAYPY,YAAAA,IAZO,GAYA,wBAAU;AAAEF,cAAAA,MAAM,EAANA,MAAF;AAAUP,cAAAA,IAAI,EAAJA,IAAV;AAAgBE,cAAAA,KAAK,EAALA,KAAhB;AAAuBC,cAAAA,IAAI,EAAJA,IAAvB;AAA6BC,cAAAA,IAAI,EAAJA,IAA7B;AAAmCC,cAAAA,KAAK,EAALA,KAAnC;AAA0CC,cAAAA,MAAM,EAANA;AAA1C,aAAV,CAZA;AAAA;AAAA,mBAcKI,KAAK,mBAAaF,MAAb,cAAyBZ,aAAzB,GAA2C;AAChEe,cAAAA,OAAO,EAAE;AACPC,gBAAAA,aAAa,EAAE,YAAYb,WADpB;AAEP,gCAAgB,sBAFT;AAGP,4CAA4BE;AAHrB,eADuD;AAMhEY,cAAAA,MAAM,EAAE,MANwD;AAOhEC,cAAAA,IAAI,EAAEL;AAP0D,aAA3C,CAdV;;AAAA;AAcPM,YAAAA,GAdO;;AAAA,kBAwBTA,GAAG,CAACC,MAAJ,KAAe,GAxBN;AAAA;AAAA;AAAA;;AAAA,kBAyBL,IAAIC,KAAJ,wDAA2DF,GAAG,CAACC,MAA/D,EAzBK;;AAAA;AAAA,6CA4BND,GAAG,CAACG,WAAJ,EA5BM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import buildSSML from './buildSSML';\n\nconst DEFAULT_LANGUAGE = 'en-US';\nconst DEFAULT_VOICE = 'Microsoft Server Speech Text to Speech Voice (en-US, JessaRUS)'\nconst SYNTHESIS_URL = 'tts.speech.microsoft.com/cognitiveservices/v1';\nconst DEFAULT_REGION = 'westus';\n\nexport default async function fetchSpeechData({\n  accessToken,\n  lang = DEFAULT_LANGUAGE,\n  outputFormat,\n  pitch,\n  rate,\n  text,\n  voice = DEFAULT_VOICE,\n  volume,\n  gender = null,\n  region = DEFAULT_REGION\n}) {\n  const ssml = buildSSML({ gender, lang, pitch, rate, text, voice, volume });\n\n  const res = await fetch(`https://${ region }.${ SYNTHESIS_URL }`, {\n    headers: {\n      Authorization: 'Bearer ' + accessToken,\n      'Content-Type': 'application/ssml+xml',\n      'X-Microsoft-OutputFormat': outputFormat\n    },\n    method: 'POST',\n    body: ssml\n  });\n\n  if (res.status !== 200) {\n    throw new Error(`Failed to synthesize speech, server returned ${ res.status }`);\n  }\n\n  return res.arrayBuffer();\n}\n"],"file":"fetchSpeechData.js"}