{"version":3,"sources":["../../src/synthesis/speechSynthesis.js"],"names":["DEFAULT_REGION","DEFAULT_OUTPUT_FORMAT","SpeechSynthesis","onvoiceschanged","region","outputFormat","queue","AudioContextQueue","stop","utterance","SpeechSynthesisUtterance","Error","fetchToken","accessToken","preload","push"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,cAAc,GAAG,QAAvB,C,CACA;;AACA,IAAMC,qBAAqB,GAAG,kCAA9B;;IAEMC,e;;;AACJ,6BAAc;AAAA;AACZ,SAAKC,eAAL,GAAuB,IAAvB;AACA,SAAKC,MAAL,GAAcJ,cAAd;AACA,SAAKK,YAAL,GAAoBJ,qBAApB;AACA,SAAKK,KAAL,GAAa,IAAIC,0BAAJ,EAAb;AACD;;;;6BAEQ;AACP,WAAKD,KAAL,CAAWE,IAAX;AACD;;;gCAEW;AACV,aAAO,2BAAP;AACD;;;0BAEKC,S,EAAW;AACf,UAAI,EAAEA,SAAS,YAAYC,iCAAvB,CAAJ,EAAsD;AACpD,cAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACD;;AAED,UAAI,CAAC,KAAKC,UAAV,EAAsB;AACpB,cAAM,IAAID,KAAJ,CAAU,yCAAV,CAAN;AACD,OAFD,MAEO,IAAI,OAAO,KAAKC,UAAZ,KAA2B,UAA/B,EAA2C;AAChD,cAAM,IAAID,KAAJ,CACJ,4GADI,CAAN;AAGD;;AAEDF,MAAAA,SAAS,CAACI,WAAV,GAAwB,KAAKD,UAAL,EAAxB;AACAH,MAAAA,SAAS,CAACL,MAAV,GAAmB,KAAKA,MAAxB;AACAK,MAAAA,SAAS,CAACJ,YAAV,GAAyB,KAAKA,YAA9B;AACAI,MAAAA,SAAS,CAACK,OAAV;AAEA,WAAKR,KAAL,CAAWS,IAAX,CAAgBN,SAAhB;AACD;;;;;eAGY,IAAIP,eAAJ,E","sourcesContent":["import AudioContextQueue from \"./AudioContextQueue\";\nimport fetchVoices from \"./fetchVoices\";\nimport SpeechSynthesisUtterance from \"./SpeechSynthesisUtterance\";\n\nconst DEFAULT_REGION = \"westus\";\n// Supported output format can be found at https://docs.microsoft.com/en-us/azure/cognitive-services/Speech/API-Reference-REST/BingVoiceOutput#Subscription\nconst DEFAULT_OUTPUT_FORMAT = \"audio-16khz-128kbitrate-mono-mp3\";\n\nclass SpeechSynthesis {\n  constructor() {\n    this.onvoiceschanged = null;\n    this.region = DEFAULT_REGION;\n    this.outputFormat = DEFAULT_OUTPUT_FORMAT;\n    this.queue = new AudioContextQueue();\n  }\n\n  cancel() {\n    this.queue.stop();\n  }\n\n  getVoices() {\n    return fetchVoices();\n  }\n\n  speak(utterance) {\n    if (!(utterance instanceof SpeechSynthesisUtterance)) {\n      throw new Error(\"invalid utterance\");\n    }\n\n    if (!this.fetchToken) {\n      throw new Error(\"SpeechSynthesis: fetchToken must be set\");\n    } else if (typeof this.fetchToken !== \"function\") {\n      throw new Error(\n        \"SpeechSynthesis: fetchToken must be a function that returns a Promise and resolves to a string-based token\"\n      );\n    }\n\n    utterance.accessToken = this.fetchToken();\n    utterance.region = this.region;\n    utterance.outputFormat = this.outputFormat;\n    utterance.preload();\n\n    this.queue.push(utterance);\n  }\n}\n\nexport default new SpeechSynthesis();\n"],"file":"speechSynthesis.js"}