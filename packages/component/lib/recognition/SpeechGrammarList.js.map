{"version":3,"sources":["../../src/recognition/SpeechGrammarList.js"],"names":["_referenceGrammar","_words","Error","referenceGrammar","words","speechContext","groups","Type","Hints","ReferenceGrammar","length","Items","map","Text","word","nextReferenceGrammar","nextWords","Array","isArray"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;;;;;;AAGE,oBAAc;AAAA;;AACZ,SAAKA,iBAAL,GAAyB,IAAzB;AACA,SAAKC,MAAL,GAAc,EAAd;AACD;;;;oCAEe;AACd,YAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;;0CAoBqB;AAAA,UACZC,gBADY,GACgB,IADhB,CACZA,gBADY;AAAA,UACMC,KADN,GACgB,IADhB,CACMA,KADN;;AAEpB,UAAIC,sBAAJ;;AAEA,UAAIF,gBAAJ,EAAsB;AACpBE,wBAAgB,8BAASA,aAAT,EAAwB,CAAC,KAAD,EAAQ,QAAR,CAAxB,EAA2C;AAAA,cAACC,MAAD,uEAAU,EAAV;AAAA,4DAAqBA,MAArB,IAA6B;AACtFC,kBAAM,SADgF;AAEtFC,mBAAO,EAAEC,kBAAkBN,gBAApB;AAF+E,WAA7B;AAAA,SAA3C,CAAhB;AAID;;AAED,UAAIC,SAASA,MAAMM,MAAnB,EAA2B;AACzBL,wBAAgB,8BAASA,aAAT,EAAwB,CAAC,KAAD,EAAQ,QAAR,CAAxB,EAA2C;AAAA,cAACC,MAAD,uEAAU,EAAV;AAAA,4DAAqBA,MAArB,IAA6B;AACtFC,kBAAM,SADgF;AAEtFI,mBAAOP,MAAMQ,GAAN,CAAU;AAAA,qBAAS,EAAEC,MAAMC,IAAR,EAAT;AAAA,aAAV;AAF+E,WAA7B;AAAA,SAA3C,CAAhB;AAID;;AAED,aAAOT,aAAP;AACD;;;wBArCsB;AAAE,aAAO,KAAKL,iBAAZ;AAAgC,K;sBACpCe,oB,EAAsB;AACzC,UAAI,OAAOA,oBAAP,KAAgC,QAApC,EAA8C;AAC5C,cAAM,IAAIb,KAAJ,CAAU,mCAAV,CAAN;AACD;;AAED,WAAKF,iBAAL,GAAyBe,oBAAzB;AACD;;;wBAEW;AAAE,aAAO,KAAKd,MAAZ;AAAqB,K;sBACzBe,S,EAAW;AACnB,UAAI,CAACC,MAAMC,OAAN,CAAcF,SAAd,CAAL,EAA+B;AAC7B,cAAM,IAAId,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,WAAKD,MAAL,GAAce,SAAd;AACD","file":"SpeechGrammarList.js","sourcesContent":["import updateIn from 'simple-update-in';\n\nexport default class {\n  constructor() {\n    this._referenceGrammar = null;\n    this._words = [];\n  }\n\n  addFromString() {\n    throw new Error('JSGF is not supported');\n  }\n\n  get referenceGrammar() { return this._referenceGrammar; }\n  set referenceGrammar(nextReferenceGrammar) {\n    if (typeof nextReferenceGrammar !== 'string') {\n      throw new Error('referenceGrammar must be a string');\n    }\n\n    this._referenceGrammar = nextReferenceGrammar;\n  }\n\n  get words() { return this._words; }\n  set words(nextWords) {\n    if (!Array.isArray(nextWords)) {\n      throw new Error('words must be an Array');\n    }\n\n    this._words = nextWords;\n  }\n\n  createSpeechContext() {\n    const { referenceGrammar, words } = this;\n    let speechContext;\n\n    if (referenceGrammar) {\n      speechContext = updateIn(speechContext, ['dgi', 'Groups'], (groups = []) => [...groups, {\n        Type: 'Generic',\n        Hints: { ReferenceGrammar: referenceGrammar }\n      }]);\n    }\n\n    if (words && words.length) {\n      speechContext = updateIn(speechContext, ['dgi', 'Groups'], (groups = []) => [...groups, {\n        Type: 'Generic',\n        Items: words.map(word => ({ Text: word }))\n      }]);\n    }\n\n    return speechContext;\n  }\n}\n"]}