{"version":3,"sources":["../../src/recognition/SpeechRecognition.js"],"names":["CognitiveSpeech","buildSpeechResult","transcript","confidence","isFinal","result","results","type","_lang","readyState","onaudiostart","onaudioend","onend","onerror","onnomatch","onresult","onsoundstart","onsoundend","onspeechstart","onspeechend","onstart","createRecognizer","lang","navigator","language","mode","RecognitionMode","Interactive","osPlatform","window","userAgent","osName","appName","osVersion","appVersion","deviceManufacturer","deviceModel","deviceVersion","config","RecognizerConfig","SpeechConfig","Context","OS","Device","SpeechResultFormat","Detailed","fetchToken","sink","Sink","console","error","Reject","then","Resolve","Promise","err","message","CreateRecognizer","CognitiveTokenAuthentication","recognizer","AudioSource","TurnOff","_aborted","name","event","listener","call","Error","toPromise","eventListener","promises","speechContext","grammars","createSpeechContext","Recognize","recognitionTriggered","race","listeningStarted","recognitionEnded","Name","Status","RecognitionCompletionStatus","AudioSourceError","emit","connectingToService","recognitionStarted","ConnectError","gotFirstHypothesis","getSpeechHypothesisPromise","speechEndDetected","speechHypothesis","Result","Text","speechDetailedPhrase","recognitionResult","RecognitionStatus","Success","NBest","Display","Confidence","NoMatch","InitialSilenceTimeout","_grammars","nextGrammars","SpeechGrammarList","nextLang","nextContinuous","nextInterimResults","nextMaxAlternatives","nextServiceURI","events","ConnectingToServiceEvent","EventAsPromise","ListeningStartedEvent","RecognitionEndedEvent","RecognitionStartedEvent","RecognitionTriggeredEvent","SpeechDetailedPhraseEvent","SpeechEndDetectedEvent","SpeechHypothesisEvent","SpeechSimplePhraseEvent","SpeechStartDetectedEvent","upcoming","speechSimplePhrase","speechStartDetected","eventAsPromise","warn"],"mappings":"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","file":"SpeechRecognition.js","sourcesContent":["import * as CognitiveSpeech from 'microsoft-speech-browser-sdk';\nimport EventAsPromise from 'event-as-promise';\nimport memoize from 'memoize-one';\n\nimport SpeechGrammarList from './SpeechGrammarList';\n\nfunction buildSpeechResult(transcript, confidence, isFinal) {\n  const result = [{ confidence, transcript }];\n\n  result.isFinal = isFinal;\n\n  return { results: [result], type: 'result' };\n}\n\nexport default class {\n  constructor() {\n    this._lang = '';\n\n    this.readyState = 0;\n\n    this.onaudiostart = null;\n    this.onaudioend = null;\n    this.onend = null;\n    this.onerror = null;\n    this.onnomatch = null;\n    this.onresult = null;\n    this.onsoundstart = null;\n    this.onsoundend = null;\n    this.onspeechstart = null;\n    this.onspeechend = null;\n    this.onstart = null;\n\n    this.createRecognizer = memoize((\n      lang = navigator.language,\n      mode = CognitiveSpeech.RecognitionMode.Interactive,\n      osPlatform = window.navigator.userAgent,\n      osName = window.navigator.appName,\n      osVersion = window.navigator.appVersion,\n      deviceManufacturer = 'microsoft-speech-browser-sdk',\n      deviceModel = 'web-speech-cognitive-services',\n      deviceVersion = VERSION\n    ) => {\n      const config = new CognitiveSpeech.RecognizerConfig(\n        new CognitiveSpeech.SpeechConfig(\n          new CognitiveSpeech.Context(\n            new CognitiveSpeech.OS(\n              osPlatform,\n              osName,\n              osVersion\n            ),\n            new CognitiveSpeech.Device(\n              deviceManufacturer,\n              deviceModel,\n              deviceVersion\n            )\n          )\n        ),\n        mode,\n        lang,\n        CognitiveSpeech.SpeechResultFormat.Detailed\n      );\n\n      const fetchToken = () => {\n        try {\n          const sink = new CognitiveSpeech.Sink();\n\n          if (!this.fetchToken) {\n            console.error('SpeechRecognition: fetchToken must be set');\n\n            return sink.Reject('fetchToken must be set');\n          } else if (typeof this.fetchToken !== 'function') {\n            console.error('SpeechRecognition: fetchToken must be a function that returns a Promise and it will resolve to a string-based token');\n\n            return sink.Reject('fetchToken must be a function that returns a Promise and it will resolve to a string-based token');\n          }\n\n          this.fetchToken().then(sink.Resolve, sink.Reject);\n\n          return new CognitiveSpeech.Promise(sink);\n        } catch (err) {\n          sink.Reject(err.message);\n        }\n      };\n\n      return CognitiveSpeech.CreateRecognizer(config, new CognitiveSpeech.CognitiveTokenAuthentication(fetchToken, fetchToken));\n    });\n  }\n\n  get grammars() { return this._grammars; }\n  set grammars(nextGrammars) {\n    if (nextGrammars && !(nextGrammars instanceof SpeechGrammarList)) {\n      throw new Error('must be instance of SpeechGrammarList from \"web-speech-cognitive-services\"');\n    }\n\n    this._grammars = nextGrammars;\n  }\n\n  get lang() { return this._lang; }\n  set lang(nextLang) { this._lang = nextLang; }\n\n  get continuous() { return false; }\n  set continuous(nextContinuous) { throw new Error('not supported'); }\n\n  get interimResults() { return true; }\n  set interimResults(nextInterimResults) {\n    if (!nextInterimResults) {\n      throw new Error('not supported');\n    }\n  }\n\n  get maxAlternatives() { return 1; }\n  set maxAlternatives(nextMaxAlternatives) { throw new Error('not supported'); }\n\n  get serviceURI() { return null; }\n  set serviceURI(nextServiceURI) { throw new Error('not supported'); }\n\n  abort() {\n    // TODO: Should redesign how to stop a recognition session\n    //       After abort is called, we should not saw it is a \"success\", \"silent\", or \"no match\"\n    const { AudioSource } = this.recognizer || {};\n\n    AudioSource && AudioSource.TurnOff();\n\n    this._aborted = true;\n  }\n\n  emit(name, event) {\n    const listener = this[`on${ name }`];\n\n    listener && listener.call(this, { ...event, type: name });\n  }\n\n  stop() {\n    // TODO: Support stop\n    throw new Error('not supported');\n  }\n\n  async start() {\n    const recognizer = this.recognizer = this.createRecognizer(\n      this.lang,\n      this.osPlatform || window.navigator.userAgent,\n      this.osName || window.navigator.appName,\n      this.osVersion || window.navigator.appVersion,\n      this.deviceManufacturer || 'web-speech-cognitive-services',\n      this.deviceModel || 'web-speech-cognitive-services',\n      this.deviceVersion || VERSION\n    );\n\n    const { eventListener, ...promises } = toPromise();\n\n    const speechContext = this.grammars && this.grammars.createSpeechContext();\n\n    recognizer.Recognize(eventListener, speechContext && JSON.stringify(speechContext));\n    this._aborted = false;\n\n    await promises.recognitionTriggered;\n\n    let error;\n\n    const listeningStarted = await Promise.race([\n      promises.listeningStarted,\n      promises.recognitionEnded\n    ]);\n\n    if (listeningStarted.Name === 'RecognitionEndedEvent') {\n      // Possibly not authorized to use microphone\n      if (listeningStarted.Status === CognitiveSpeech.RecognitionCompletionStatus.AudioSourceError) {\n        error = 'not-allowed';\n      } else {\n        error = CognitiveSpeech.RecognitionCompletionStatus[listeningStarted.Status];\n      }\n    } else {\n      this.emit('start');\n\n      await promises.connectingToService;\n\n      const recognitionStarted = await Promise.race([\n        promises.recognitionStarted,\n        promises.recognitionEnded\n      ]);\n\n      this.emit('audiostart');\n\n      if (recognitionStarted.Name === 'RecognitionEndedEvent') {\n        // Possibly network error\n        if (recognitionStarted.Status === CognitiveSpeech.RecognitionCompletionStatus.ConnectError) {\n          error = 'network';\n        } else {\n          error = CognitiveSpeech.RecognitionCompletionStatus[recognitionStarted.Status];\n        }\n      } else {\n        let gotFirstHypothesis;\n\n        for (;;) {\n          const speechHypothesis = await Promise.race([\n            promises.getSpeechHypothesisPromise(),\n            promises.speechEndDetected\n          ]);\n\n          if (speechHypothesis.Name === 'SpeechEndDetectedEvent') {\n            break;\n          }\n\n          if (!gotFirstHypothesis) {\n            gotFirstHypothesis = true;\n            this.emit('soundstart');\n            this.emit('speechstart');\n          }\n\n          this.emit('result', buildSpeechResult(speechHypothesis.Result.Text, .5, false));\n        }\n\n        if (gotFirstHypothesis) {\n          this.emit('speechend');\n          this.emit('soundend');\n        }\n      }\n\n      this.emit('audioend');\n\n      if (this._aborted) {\n        error = 'aborted';\n\n        await promises.recognitionEnded;\n      } else {\n        const speechDetailedPhrase = await Promise.race([\n          promises.speechDetailedPhrase,\n          promises.recognitionEnded\n        ]);\n\n        if (speechDetailedPhrase.Name !== 'RecognitionEndedEvent') {\n          const recognitionResult = CognitiveSpeech.RecognitionStatus[speechDetailedPhrase.Result.RecognitionStatus];\n\n          if (recognitionResult === CognitiveSpeech.RecognitionStatus.Success) {\n            this.emit('result', buildSpeechResult(speechDetailedPhrase.Result.NBest[0].Display, speechDetailedPhrase.Result.NBest[0].Confidence, true));\n          } else if (recognitionResult !== CognitiveSpeech.RecognitionStatus.NoMatch) {\n            // Possibly silent or muted\n            if (recognitionResult === CognitiveSpeech.RecognitionStatus.InitialSilenceTimeout) {\n              error = 'no-speech';\n            } else {\n              error = speechDetailedPhrase.Result.RecognitionStatus;\n            }\n          }\n\n          await promises.recognitionEnded;\n        }\n      }\n    }\n\n    error && this.emit('error', { error });\n    this.emit('end');\n  }\n}\n\nfunction toPromise() {\n  const events = {\n    ConnectingToServiceEvent: new EventAsPromise(),\n    ListeningStartedEvent: new EventAsPromise(),\n    RecognitionEndedEvent: new EventAsPromise(),\n    RecognitionStartedEvent: new EventAsPromise(),\n    RecognitionTriggeredEvent: new EventAsPromise(),\n    SpeechDetailedPhraseEvent: new EventAsPromise(),\n    SpeechEndDetectedEvent: new EventAsPromise(),\n    SpeechHypothesisEvent: new EventAsPromise(),\n    SpeechSimplePhraseEvent: new EventAsPromise(),\n    SpeechStartDetectedEvent: new EventAsPromise()\n  };\n\n  return {\n    connectingToService: events.ConnectingToServiceEvent.upcoming(),\n    listeningStarted: events.ListeningStartedEvent.upcoming(),\n    recognitionEnded: events.RecognitionEndedEvent.upcoming(),\n    recognitionStarted: events.RecognitionStartedEvent.upcoming(),\n    recognitionTriggered: events.RecognitionTriggeredEvent.upcoming(),\n    speechDetailedPhrase: events.SpeechDetailedPhraseEvent.upcoming(),\n    speechEndDetected: events.SpeechEndDetectedEvent.upcoming(),\n    getSpeechHypothesisPromise: () => events.SpeechHypothesisEvent.upcoming(),\n    speechSimplePhrase: events.SpeechSimplePhraseEvent.upcoming(),\n    speechStartDetected: events.SpeechStartDetectedEvent.upcoming(),\n    eventListener: event => {\n      const { Name: name } = event;\n      const eventAsPromise = events[name];\n\n      if (eventAsPromise) {\n        eventAsPromise.eventListener.call(null, event);\n      } else {\n        console.warn(`Unexpected event \\\"${ name }\\\" from Cognitive Services, please file a bug to https://github.com/compulim/web-speech-cognitive-services`);\n      }\n    }\n  };\n}\n"]}